{"version":3,"sources":["components/Card/index.js","components/Card/Card.js","info.js","components/CardField/index.js","components/CardField/CardField.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Card","state","isDisabled","isSelected","isHovered","cardClick","setState","cardHover","cardLeave","test","out","this","props","weight","inside","portions","mouses","p3","about","border_color","ellips","card_opacity","undercard","className","onClick","onMouseEnter","onMouseLeave","Component","CardField","onTablet","mediaUpdate","window","matchMedia","matches","addEventListener","info_top","info","slice","info_bot","element_tablet__top","map","i","key","id","element_tablet__bot_cards","element_tablet__bot","element","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.161e7ea4.chunk.js","sourcesContent":["import Card from './Card'\r\nexport default Card","import React, {Component} from 'react'\r\nimport './style.css'\r\n\r\nexport default class Card extends Component{\r\n    state = {\r\n        isDisabled: false,\r\n        isSelected: false,\r\n        isHovered: false\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {out} = this.props\r\n        this.setState({\r\n            isDisabled: out\r\n        })\r\n    }\r\n    render(){\r\n        const {weight, inside, portions, mouses, p3, about} = this.props\r\n        const border_color = this.state.isDisabled ? 'card_border is_disabled' : (this.state.isSelected ? (this.state.isHovered ? 'card_border is_selected-hovered' : 'card_border is_selected') : (this.state.isHovered ? 'card_border is_hovered' : 'card_border is_default')) \r\n        const ellips = this.state.isDisabled ? 'card_weight is_disabled' : (this.state.isSelected ? (this.state.isHovered ? 'card_weight is_selected-hovered' : 'card_weight is_selected') : (this.state.isHovered ? 'card_weight is_hovered' : 'card_weight is_default')) \r\n        const card_opacity = this.state.isDisabled ? 'card is-disabled_opacity' : 'card'\r\n        const undercard = this.state.isDisabled ? <p className=\"card_outer-text__disabled\">Печалька, с {inside} закончился.</p> : (this.state.isSelected ? <p className=\"card_outer-text\">{about}</p> : <p className=\"card_outer-text\">Чего сидишь? Порадуй котэ, <span onClick={() => this.cardClick()} className=\"card_outer-text__link\">купи.</span></p>)\r\n        \r\n        return(\r\n            <div className=\"card_wrapper\">\r\n                <div onClick={() => this.cardClick()} onMouseEnter={() => this.cardHover()} onMouseLeave={() => this.cardLeave()} className={border_color}>\r\n                    <div className={card_opacity}>\r\n                        <div className='card_info'>\r\n                        <p>Сказочное заморское яство</p>\r\n                        <h2>Нямушка</h2>\r\n                        <h3>с {inside}</h3>\r\n                        <ul>\r\n                            <li><b>{portions}</b> порций</li>\r\n                            <li><b>{mouses}</b> в подарок</li>\r\n                            <li>{p3}</li>\r\n                        </ul>\r\n                        </div>\r\n                        <div className=\"card_pic\"></div>\r\n                        <div className={ellips}><p>{weight}</p><p>кг</p></div>\r\n                    </div>\r\n                </div>\r\n                {undercard}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    cardClick = () =>{\r\n        this.setState({\r\n            isSelected: !this.state.isSelected,\r\n            isHovered: false\r\n        })\r\n    }\r\n\r\n    cardHover = () =>{\r\n        this.setState({\r\n            isHovered: true\r\n        })\r\n    }\r\n    \r\n    cardLeave = () =>{\r\n        this.setState({\r\n            isHovered: false\r\n        })\r\n    }\r\n    test = () =>{\r\n        this.setState({\r\n            isHovered: !this.state.isHovered\r\n        })\r\n    }\r\n}","export default [\r\n    {\r\n        \"id\": \"1\",\r\n        \"weight\": \"0,5\",\r\n        \"inside\": \"фуа-гра\",\r\n        \"portions\": \"10\",\r\n        \"mouses\": \"мышь\",\r\n        \"p3\": \"\",\r\n        \"about\": \"Печень утки разварная с артишоками.\",\r\n        \"out\": false                                                            \r\n    },\r\n    {\r\n        \"id\": \"2\",\r\n        \"weight\": \"2\",\r\n        \"inside\": \"рыбой\",\r\n        \"portions\": \"40\",\r\n        \"mouses\": \"2 мыши\",\r\n        \"p3\": \"\",\r\n        \"about\": \"Головы щучьи с чесноком да свежайшая сёмгушка.\",\r\n        \"out\": false\r\n    },\r\n    {\r\n        \"id\": \"3\",\r\n        \"weight\": \"5\",\r\n        \"inside\": \"курой\",\r\n        \"portions\": \"100\",\r\n        \"mouses\": \"5 мышей\",\r\n        \"p3\": \"заказчик доволен\",\r\n        \"about\": \"Филе из цыплят с трюфелями в бульоне.\",\r\n        \"out\": true\r\n    }\r\n]","import CardField from './CardField'\r\nexport default CardField","import React, {Component} from 'react'\r\nimport './style.css'\r\nimport Card from '../Card'\r\nimport info from '../../info'\r\n\r\nexport default class CardField extends Component{\r\n    state = {\r\n        onTablet: null\r\n    }\r\n\r\n    mediaUpdate = () => {\r\n        this.setState({\r\n            onTablet: window.matchMedia('screen and (min-width: 700px) and (orientation:portrait)').matches\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            onTablet: window.matchMedia('screen and (min-width: 700px) and (orientation:portrait)').matches\r\n        })\r\n        window.addEventListener('resize', this.mediaUpdate)\r\n    }\r\n\r\n    render(){\r\n        if(this.state.onTablet){\r\n            const info_top = info.slice(0,1)\r\n            const info_bot = info.slice(1,3)\r\n            const element_tablet__top = info_top.map((i) =>\r\n            <div key={i.id} className='card_field__line'>\r\n                <Card key={i.id} weight={i.weight} inside={i.inside} portions={i.portions} mouses={i.mouses} p3={i.p3} about={i.about} out={i.out} />\r\n            </div>)\r\n            const element_tablet__bot_cards = info_bot.map((i) =>\r\n                <Card key={i.id} weight={i.weight} inside={i.inside} portions={i.portions} mouses={i.mouses} p3={i.p3} about={i.about} out={i.out} />\r\n            )\r\n            const element_tablet__bot = <div className='card_field__line'>{element_tablet__bot_cards}</div>\r\n            return(\r\n                <div className='card_field'>\r\n                    {element_tablet__top}\r\n                    {element_tablet__bot}\r\n                </div>\r\n            )\r\n        } else{\r\n            const element = info.map((i) =>\r\n                <Card key={i.id} weight={i.weight} inside={i.inside} portions={i.portions} mouses={i.mouses} p3={i.p3} about={i.about} out={i.out} />\r\n            )\r\n            return(\r\n                <div className='card_field'>\r\n                    {element}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport CardField from '../CardField'\r\nimport './style.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <h1 className=\"h1\">Ты сегодня покормил кота?</h1>\r\n      <CardField />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}